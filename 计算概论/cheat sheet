### 递归算法以及eval()函数
```python
s = input().split()
def cal():
    cur = s.pop(0)
    if cur in "+-*/":
        return str(eval(cal() + cur + cal()))
    else:
        return cur
print("%.6f" % float(cal()))
```
### 辅助栈的维护
```python
import sys

# 使用两个栈来实现
stack = []
min_stack = []

# 读取所有输入并按行处理
input = sys.stdin.read
data = input().strip().splitlines()

for s in data:
    if s == 'pop':
        if stack:
            stack.pop()
            min_stack.pop()
    elif s == 'min':
        if stack:
            print(min_stack[-1])
    else:
        # 假设输入格式为 "push n"
        command, value = s.split()
        if command == 'push':
            weight = int(value)
            stack.append(weight)
            if not min_stack or weight <= min_stack[-1]:
                min_stack.append(weight)
            else:
                min_stack.append(min_stack[-1])
```
### 整数划分问题dp算法
```python
dp = [0] * (50 + 1)  
dp[0] = 1  # 基础情况：有一种方式来分解 0  
for i in range(1, 50 + 1):  
    for j in range(i, 50 + 1):  
        dp[j] += dp[j - i]   
while True:
    try:
        n = int(input())
        ans = dp[n]
        print(ans)
    except EOFError:
        break
```
### 深度优先搜索（dfs）
```python
import sys
sys.setrecursionlimit(20000)
dx = [-1, -1, -1, 0, 0, 1, 1, 1]
dy = [-1, 0, 1, 1, -1, -1, 0, 1]
def dfs(x, y, field):
    field[x][y] = '.'
    for i in range(8):
        nx, ny = x + dx[i], y + dy[i]
        if 0 <= nx < N and 0 <= ny < M and\
              field[nx][ny] == 'W':
            dfs(nx, ny, field)
N, M = map(int, input().split())
field = []
for i in range(N):
    field.append(list(input()))
counter = 0
for i in range(N):
    for j in range(M):
        if field[i][j] == 'W':
            dfs(i, j, field)
            counter += 1
print(counter)
```
### 求排列的逆序数（二分归并）
```python
def mergeSort(arr):
    if len(arr) <= 1:
        return arr, 0
    mid = len(arr) // 2
    left, inv_count_left = mergeSort(arr[:mid])
    right, inv_count_right = mergeSort(arr[mid:])
    merged, inv_count = merge(left, right)
    inv_count += inv_count_left + inv_count_right
    return merged, inv_count
def merge(left, right):
    merged = []
    inv_count = 0
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inv_count += len(left) - i
    merged += left[i:]
    merged += right[j:]
    return merged, inv_count
# 输入排列
n = int(input())
arr = list(map(int, input().split()))
# 调用归并排序函数并输出逆序数
sorted_arr, inv_count = mergeSort(arr)
print(inv_count)
```
### 滑动窗口解决最长子列
```python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        #滑动窗口
        char_map = {}
        left, max_length = 0, 0
        for right in range(len(s)):
            if s[right] in char_map and char_map[s[right]] >= left:
                left = char_map[s[right]] + 1
                char_map[s[right]] = right
            else:
                char_map[s[right]] = right
                max_length = max(max_length, right - left + 1)
        return max_length
    ans = lengthOfLongestSubstring
    print(ans)
```
### 小偷背包类型动态规划
```python
n, t = map(int, input().split())
value = list(map(int, input().split()))
def discount(n, t, value):
    sum_value = sum(value)
    if sum_value < t:
        return 0
    dp = [0] * (sum_value + 1)
    for i in range(1, n + 1):
        for j in range(sum_value, 0, -1):
            if value[i - 1] <= j:
                dp[j] = max(dp[j], dp[j - value[i - 1]] + value[i - 1])
    for i in range(t, sum_value + 1):
        if dp[i] >= t:
            return dp[i]
ans = discount(n, t, value)
print(ans)
```
```python
N, B = map(int,input().split())
value = list(map(int,input().split()))
weight = list(map(int,input().split()))
dp = [0] * (B + 1)
for i in range(1, N + 1):
    for j in range(B, 0, -1):
        if weight[i-1] <=  j:
            dp[j] = max(dp[j],dp[j - weight[i-1]] + value[i-1])
print(dp[B])
```
### 宝可梦皮卡丘(注释掉的是自己超时代码，没注释的是题解)
```python
#N, M, K = map(int, input().split())
#l = [list(map(int, input().split())) for _ in range(K)]

#dp = [[0] * (M + 1) for _ in range(N + 1)]
#for i in range(1, K + 1):
#    for j in range(N, 0, -1):
#        for k in range(M, 0, -1):
#            if l[i - 1][0] <= j and l[i - 1][1] <= k:
#                dp[j][k] = max(dp[j][k], dp[j - l[i - 1][0]][k - l[i - 1][1]] + 1)
#target = dp[N][M]

#def find_target(dp, target, N, M):
#    ans = M + 1
#    for i in range(N + 1):
#        for j in range(M + 1):
#            if dp[i][j] == target:
#                ans = min(ans, j)
#                if ans == j:
#                    break
#    return ans

#remaining = M - find_target(dp, target, N, M)
#print(target, remaining)


N, M, K = map(int, input().split())
L = [[-1] * (M + 1) for i in range(K + 1)]
L[0][M] = N
for i in range(K):
    cost, dmg = map(int, input().split())
    for p in range(M):
        for q in range(i + 1, 0, -1):
            if p + dmg <= M and L[q - 1][p + dmg] != -1:
                L[q][p] = max(L[q][p], L[q - 1][p + dmg] - cost)

def find():
    for i in range(K, -1, -1):
        for j in range(M, -1, -1):
            if L[i][j] != -1:
                return [str(i), str(j)]
            
print(' '.join(find()))
```
### 接雨水
```python
#动态规划解法
class Solution:
    def trap(self, height: List[int]) -> int:
        n = len(height)
        leftmax = [0] * n
        rightmax = [0] * n
        leftmax[0], rightmax[n - 1] = height[0], height[n - 1]
        for i in range(1, n):
            leftmax[i] = max(leftmax[i - 1], height[i])
        for i in range(n - 2, -1, -1):
            rightmax[i] = max(rightmax[i + 1], height[i])
        ans = 0
        for i in range(n):
            ans += min(leftmax[i], rightmax[i]) - height[i]
        return ans
    ans = trap
    print(ans)
### 单调栈解法
```python
class Solution:
    def trap(self, height: List[int]) -> int:
        ans = 0
        stack = list()
        n = len(height)
        
        for i, h in enumerate(height):
            while stack and h > height[stack[-1]]:
                top = stack.pop()
                if not stack:
                    break
                left = stack[-1]
                currWidth = i - left - 1
                currHeight = min(height[left], height[i]) - height[top]
                ans += currWidth * currHeight
            stack.append(i)
        
        return ans
```
### 扔一个dfs模板
```python
#可移动方式
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

#维护，防止越界
def in_bound(x, y, n, m):
    return 0 <= x < n and 0 <= y < m

#定义dfs函数
def dfs(x, y, n, m, visited, matrix, path, value, last_path, last_value):
    
    #如果走到终点，且value大于last_value，更新last_value以及last_path
    if x == n - 1 and y == m - 1:
        if value > last_value or last_value == 0:
            last_value = value
            last_path = path[:]
        return last_path, last_value
    
    #递归调用与回溯
    for i in range(4):
        next_x = x + dx[i]
        next_y = y + dy[i]
        if in_bound(next_x, next_y, n, m) and not visited[next_x][next_y]:
            value += matrix[next_x][next_y]
            path.append([next_x, next_y])
            visited[next_x][next_y] = True
            last_path, last_value = dfs(next_x, next_y, n, m, visited, matrix, path, value, last_path, last_value)
            value -= matrix[next_x][next_y]
            path.pop()
            visited[next_x][next_y] = False
    return last_path, last_value

#主函数
n, m = map(int,input().split())
visited = [[False] * m for _ in range(n)]
visited[0][0] = True
matrix = []
for i in range(n):
    matrix.append(list(map(int,input().split())))
#初始化
value, last_value = matrix[0][0], float('-inf')
path, last_path = [[0, 0]], []
last_path, last_value = dfs(0, 0, n, m, visited, matrix, path, value, last_path, last_value)
for i in last_path:
    print(' '.join([str(e + 1) for e in i]))
```
### bfs模板（以及python数据读入可能遇到的问题）
```python
import sys
sys.setrecursionlimit(300000)
input = sys.stdin.read

from collections import deque

dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

def in_bound(x, y, M, N):
    return 0 <= x < M and 0 <= y < N

def bfs(matrix, M, N, positions, x_c, y_c):
    visited = [[False] * N for _ in range(M)]
    queue = deque([])
    
    for x_i, y_i, heigh in positions:
        if x_i == x_c and y_i == y_c:
            return True
        visited[x_i][y_i] = True
        queue.append((x_i, y_i, heigh))
    
    while queue:
        cur_x, cur_y, heigh = queue.popleft()
        for i in range(4):
            next_x = cur_x + dx[i]
            next_y = cur_y + dy[i]
            
            if in_bound(next_x, next_y, M, N) and not visited[next_x][next_y] and matrix[next_x][next_y] < heigh:
                if next_x == x_c and next_y == y_c:
                    return True
                visited[next_x][next_y] = True
                queue.append((next_x, next_y, heigh))
    
    return visited[x_c][y_c]

# 读取所有输入
data = input().split()
index = 0

ans = []
K = int(data[index])
index += 1

for i in range(K):
    M, N = map(int, data[index:index + 2])
    index += 2
    matrix = []
    for _ in range(M):
        matrix.append(list(map(int, data[index:index + N])))
        index += N    
    x_c, y_c = map(int, data[index:index + 2])
    index += 2
    P = int(data[index])
    index += 1
    positions = []
    for j in range(P):
        x_i, y_i = map(int, data[index: index + 2])
        positions.append((x_i - 1, y_i - 1, matrix[x_i - 1][y_i - 1]))
        index += 2
    
    if bfs(matrix, M, N, positions, x_c - 1, y_c - 1):
        ans.append('Yes')
    else:
        ans.append('No')

for answer in ans:
    print(answer)
```
### 二维矩阵二分查找
```python
class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        n = len(matrix)
        m = len(matrix[0])
        #初始化指针
        i, j = 0, n - 1

        while i <= j:
            mid_start = (i + j) // 2
            if matrix[mid_start][0] <= target <= matrix[mid_start][-1]:
                break
            elif matrix[mid_start][0] < target:
                i = mid_start + 1
            else:
                j = mid_start - 1
        
        #不存在
        if i > j:
            return False

        l = matrix[mid_start]
        start, end = 0, m - 1

        while start <= end:
            mid = (start + end) // 2
            if l[mid] == target:
                return True
            elif l[mid] < target:
                start = mid + 1
            else:
                end = mid - 1
        if l[mid] == target:
            return True
        else:
            return False
    if searchMatrix:
        print('true')
    else:
        print('false')
```
### 二分查找（找列表中一个数开始与结束位置）
```python
class Solution:
    def searchRange(self, nums: List[int], target: int) -> List[int]:
        n = len(nums)
        if n == 0:
            return [-1, -1]

        #查找左边界（第一个等于target的数）
        def binary_search_left(nums, target):
            left, right = 0, n - 1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] < target:
                    left = mid + 1
                else:
                    right = mid - 1
            return left

        #查找右边界（第一个大于target的数）
        def binary_search_right(nums, target):
            left, right = 0, n - 1
            while left <= right:
                mid = (left + right) // 2
                if nums[mid] <= target:
                    left = mid + 1
                else:
                    right = mid - 1
            return right

        start = binary_search_left(nums, target)
        end = binary_search_right(nums, target)

        #判断
        if start <= end and start < n and nums[start] == target:
            return [start, end]
        else:
            return [-1, -1]
    print(searchRange)
```
### bfs算法模板
```python
#bfs写一下
from collections import deque

def in_bound(x, y, n, m):
    if 0 <= x < n and 0 <= y < m:
        return True
    return False

def bfs(matrix, visited, x, y, n, m):
    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]

    queue = deque([(x, y)])
    visited[x][y] = True

    while queue:
        cur_x, cur_y = queue.popleft()

        for dx, dy in directions:
            next_x = cur_x + dx
            next_y = cur_y + dy

            if in_bound(next_x, next_y, n, m) and matrix[next_x][next_y] == 1 and not visited[next_x][next_y]:
                queue.append((next_x, next_y))
                visited[next_x][next_y] = True
def count_blocks(matrix, n, m):

    visited = [[False] * m for _ in range(n)]
    counter = 0

    for i in range(n):
        for j in range(m):

            if matrix[i][j] == 1 and not visited[i][j]:
                bfs(matrix, visited, i, j, n, m)
                counter += 1
    
    return counter

#主程序
n, m = map(int,input().split())
matrix = [list(map(int,input().split())) for _ in range(n)]

print(count_blocks(matrix, n, m))
```
### 20106 走山路
```python
#dfs 包过不了的
'''
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

def in_bound(x, y, m, n):
    return 0 <= x < m and 0 <= y < n

def dfs(m, n, x, y, x_c, y_c, matrix, visitied, min_value, cur_value):
    if x == x_c and y == y_c and min_value[0] > cur_value[0]:
        min_value[0] = cur_value[0]
        return 1
    
    ans = 0

    visitied[x][y] = True

    for i in range(4):
        next_x = x + dx[i]
        next_y = y + dy[i]

        if in_bound(next_x, next_y, m, n) and not visitied[next_x][next_y] and matrix[next_x][next_y] != '#':
            visitied[next_x][next_y] = True
            cur_value[0] += abs(int(matrix[next_x][next_y]) - int(matrix[x][y]))
            ans += dfs(m, n, next_x, next_y, x_c, y_c, matrix, visitied, min_value, cur_value)
            visitied[next_x][next_y] = False
            cur_value[0] -= abs(int(matrix[next_x][next_y]) - int(matrix[x][y]))
    return ans

answers = []
m, n, p = map(int, input().split())
matrix = [list(input().split()) for _ in range(m)]
for i in range(p):
    x, y, x_c, y_c = map(int, input().split())
    if matrix[x][y] != '#' and matrix[x_c][y_c] != '#':
        visitied = [[False] * n for i in range(m)]
        min_value = [float('inf')]
        cur_value = [0]
        ans = dfs(m, n, x, y, x_c, y_c, matrix, visitied, min_value, cur_value)
        if ans == 0:
            answers.append('NO')
        else:
            answers.append(str(min_value[0]))
    else:
        answers.append('NO')

for answer in answers:
    print(answer)
'''
'''
#Dijkstra
from heapq import heappop, heappush

def bfs(x1, y1):
    q = [(0, x1, y1)]
    visited = set()
    while q:
        t, x, y = heappop(q)
        if (x, y) in visited:
            continue
        visited.add((x, y))
        if x == x2 and y == y2:
            return t
        for dx, dy in dir:
            nx, ny = x + dx, y + dy
            if 0 <= nx < m and 0 <= ny < n and ma[nx][ny] != '#' and (nx, ny) not in visited:
                nt = t + abs(int(ma[nx][ny]) - int(ma[x][y]))
                heappush(q, (nt, nx, ny))
    
    return 'NO'

m, n, p = map(int, input().split())
ma = [list(input().split()) for _ in range(m)]
dir = [(1, 0), (-1, 0), (0, 1), (0, -1)]
for _ in range(p):
    x1, y1, x2, y2 = map(int, input().split())
    if ma[x1][x2] == '#' or ma[x2][y2] == '#':
        print('NO')
        continue
    print(bfs(x1, y1))
'''

import heapq

def dijkstra(grid, start, end):
    m, n = len(grid), len(grid[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    if grid[start[0]][start[1]] == '#' or grid[end[0]][end[1]] == '#':
        return 'NO'

    dist = [[float('inf')] * n for _ in range(m)]
    dist[start[0]][start[1]] = 0

    pq = [(0, start[0], start[1])]

    while pq:
        current_dist, u_row, u_col = heapq.heappop(pq)

        if current_dist > dist[u_row][u_col]:
            continue

        if (u_row, u_col) == end:
            return current_dist
        
        for dr, dc in directions:
            v_row, v_col = u_row + dr, u_col + dc

            if 0 <= v_row < m and 0 <= v_col < n and grid[v_row][v_col] != '#':
                new_dist = current_dist + abs(int(grid[u_row][u_col]) - int(grid[v_row][v_col]))

                if new_dist < dist[v_row][v_col]:
                    dist[v_row][v_col] = new_dist
                    heapq.heappush(pq, (new_dist, v_row, v_col))
            
    return 'NO'
    
m, n, p = map(int, input().split())
grid = [list(input().split()) for _ in range(m)]
answers = []
for i in range(p):
    x, y, x_c, y_c = map(int, input().split())
    ans = dijkstra(grid, (x, y), (x_c, y_c))
    answers.append(ans)
for answer in answers:
    print(answer)
```
### 求排列的逆序数
```python
def mergeSort(arr):
    if len(arr) <= 1:
        return arr, 0
    
    mid = len(arr) // 2
    left, inv_count_left = mergeSort(arr[:mid])
    right, inv_count_right = mergeSort(arr[mid:])
    
    merged, inv_count = merge(left, right)
    inv_count += inv_count_left + inv_count_right
    
    return merged, inv_count

def merge(left, right):
    merged = []
    inv_count = 0
    i = j = 0
    
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
            inv_count += len(left) - i
    
    merged += left[i:]
    merged += right[j:]
    
    return merged, inv_count

# 输入排列
n = int(input())
arr = list(map(int, input().split()))

# 调用归并排序函数并输出逆序数
sorted_arr, inv_count = mergeSort(arr)
print(inv_count)
```
### 欧拉筛找素数
```python
def euler_sieve(n):
    is_prime = [True] * (n + 1)
    primes = []

    for i in range(2, n + 1):
        if is_prime[i]:
            primes.append(i)
        for prime in primes:
            if i * prime > n:
                break
            is_prime[i * prime] = False
            if i % prime == 0:
                break

    return primes
```
